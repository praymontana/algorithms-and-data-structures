#define _USE_MATH_DEFINES
#include <iostream>
#include <stdexcept>
#include <cmath>
#include "Prototypes.h" 
#include <string>

using namespace std;

Calc::Stack::Stack()
{
    top = NULL;
    top_double = NULL;
}

Calc::Stack::~Stack()
{
    while (top != NULL)
        pop();

    while (top_double != NULL)
        pop();
}

Calc::Queue::Queue()
{
    begin = NULL;
    end = NULL;
}

Calc::Queue::~Queue()
{
    while (begin != NULL)
        pop();

    begin = NULL;
    end = NULL;
}

Calc::Stack::Stack_item::Stack_item(Stack_item* next_constructor, string value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}

Calc::Stack::Stack_item_double::Stack_item_double(Stack_item_double* next_constructor, double value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}


void Calc::Stack::push(string value)
{
    Stack_item* new_item = NULL;				                    // New item of the list

    // if the stack is empty the new element creates as begin of it
    if (top == NULL)
    {
        top = new Stack_item(NULL, value);
    }
    else
    {
        new_item = new Stack_item(top, value);
        top = new_item;
    }
}

void Calc::Stack::push(double value)
{
    Stack_item_double* new_item = NULL;				                    // New item of the list

    // if the stack is empty the new element creates as begin of it
    if (top_double == NULL)
    {
        top_double = new Stack_item_double(NULL, value);
    }
    else
    {
        new_item = new Stack_item_double(top_double, value);
        top_double = new_item;
    }
}

string Calc::Stack::pop()
{
    Stack_item* deleting;						                    // The removed stack element
    string value;								                    // Stack item's value

    if (top == NULL)
        throw out_of_range("The stack is empty.");

    else
    {
        value = top->value;
        deleting = top;
        top = top->next;
        delete deleting;
    }

    return value;
}

double Calc::Stack::pop_double()
{
    Stack_item_double* deleting;						                    // The removed stack element
    double value;								                            // Stack item's value

    if (top_double == NULL)
        throw out_of_range("The stack is empty.");

    else
    {
        value = top_double->value;
        deleting = top_double;
        top_double = top_double->next;
        delete deleting;
    }

    return value;
}

string Calc::Stack::peek(Calc::Stack* stack)
{
    return stack->top->value;
}

bool Calc::Stack::is_empty()
{
    bool emptiness;								                    // Flag that checks if the stack is empty

    if (top == NULL)
        emptiness = true;
    else
        emptiness = false;

    return emptiness;
}

bool Calc::Stack::is_empty_double()
{
    bool emptiness;								                    // Flag that checks if the stack is empty

    if (top_double == NULL)
        emptiness = true;
    else
        emptiness = false;

    return emptiness;
}

Calc::Queue::Queue_item::Queue_item(Queue_item* next_constructor, string value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}

void Calc::Queue::push(string value)
{
    // if the queue is empty the new element creates as begin and end of it
    if (begin == NULL)
    {
        begin = new Queue_item(NULL, value);
        end = begin;
    }
    else
    {
        end->next = new Queue_item(NULL, value);
        if (end->next == NULL)
            throw out_of_range("Memory not allocated.");
        else
            end = end->next;
    }
}

string Calc::Queue::pop()
{
    Queue_item* deleting;						                    // The removed queue element
    string value;				    					                // Queue item's value

    if (begin == NULL)
        throw out_of_range("The queue is empty.");

    else
    {
        value = begin->value;
        deleting = begin;
        begin = begin->next;
        delete deleting;
    }

    return value;
}

bool Calc::Queue::is_empty()
{
    bool emptiness;								                    // Flag that checks if the quebbue is empty

    if (begin == NULL)
        emptiness = true;
    else
        emptiness = false;

    return emptiness;
}

size_t Calc::priority(string sign, size_t index)
{
    size_t priority;

    if ((sign[index] == '(') || (sign[index] == ')'))
        priority = 0;
    else if ((sign[index] == '+') || (sign[index] == '-'))
        priority = 1;
    else if ((sign[index] == '*') || (sign[index] == '/'))
        priority = 2;
    else
        priority = 3;

    return priority;
}

bool Calc::is_sign(string string, size_t i)
{
    if (string[i] == '-')
    {
        if ((i == 0) && ((isdigit(string[i + 1])) || ((string[i + 1]) == 'p') || ((string[i + 1]) == 'e')))
            unary_minus = true;
        else if ((i >= 1) && (string[i - 1] == '(') && ((isdigit(string[i + 1])) || ((string[i + 1])=='p') || ((string[i + 1]) == 'e')))
            unary_minus = true;
    }
    else if ((string[i] == '+') || (string[i] == '*') || (string[i] == '/') || (string[i] == '^'))
        return true;
    else
        return false;
}

bool Calc::is_constant(std::string string, size_t* index)
{
    std::string helper[] = { "pi", "e" };
    std::string copy;
    bool flag = true;
    size_t i,
        j;
    size_t kol;

    kol = 2;
    for (i = 0; i < kol; i++)
    {
        flag = true;
        for (j = 0; j < helper[i].length(); j++)
        {
            if (string[*index + j] != helper[i][j])
            {
                j = helper[i].length();
                flag = false;
            }
        }
        if (flag)
        {
            if (unary_minus)
            {
                copy.append(1, '-');
                unary_minus = false;
            }

            while ((!isdigit(string[*index]) && (!is_sign(string, *index))) && (string[*index] != '(') && (string[*index] != ')'))
            {
                copy.append(1, string[*index]);
                (*index)++;
            }

            queue.push(copy);
            (*index)--;
            i = kol;
        }
    }
    return flag;
}

bool Calc::is_function(string string, size_t* index)
{
    std::string helper[] = { "sin", "asin", "cos", "acos", "tan", "atan", "cot", "ln", "log", "sqrt" };
    std::string copy;
    bool flag = true;
    size_t i,
        j;
    size_t kol;

    kol = 10;
    for (i = 0; i < kol; i++)
    {
        flag = true;
        for (j = 0; j < helper[i].length(); j++)
        {
            if (string[*index + j] != helper[i][j])
            {
                j = helper[i].length();
                flag = false;
            }
        }
        if (flag)
        {
            while ((!isdigit(string[*index]) && (!is_sign(string, *index))) && (string[*index] != '(') && (string[*index] != ')'))
            {
                copy.append(1, string[*index]);
                (*index)++;
            }

            if ((stack.is_empty()) || (stack.top->value == "("))
            {
                stack.push(copy);
                (*index)--;
            }

            else if (priority(helper[i], 0) > priority(stack.top->value))
            {
                stack.push(copy);
                (*index)--;
            }

            else if (priority(helper[i], 0) <= priority(stack.top->value))
            {
                do
                {
                    queue.push(stack.pop());
                } while ((!stack.is_empty()) && (stack.top->value != "(") && (priority(helper[i], 0) <= priority(stack.peek(&stack))));
                stack.push(copy);
                (*index)--;
            }

            i = kol;
        }
    }
    return flag;
}

string Calc::convert(char value)
{
    string converted;
    // Converting the string to char
    converted.append(1, value);
    return converted;
}

void Calc::add_sign(string string, size_t i)
{

    // If the stack is empty or contains a left bracket at the top, then add the incoming operator to the stack
    if ((stack.is_empty()) || (stack.top->value == "("))
    {
        if (is_sign(string, i))
            stack.push(convert(string[i]));
        // If the incoming item is a left parenthesis, push it onto the stack
        else if (string[i] == ')')
            stack.pop();
    }
    // If the incoming item is a left parenthesis, push it onto the stack
    else if (string[i] == '(')
        stack.push(convert(string[i]));
    // If the incoming item is a right bracket, pop the stack and add its items to the queue until you see a left bracket
    else if (string[i] == ')')
    {
        do
        {
            queue.push(stack.pop());
        } while (stack.peek(&stack) != "(");
        // Remove the found bracket from the stack
        stack.pop();
    }
    // If the incoming operator has a higher priority than top, push it onto the stack
    else if (priority(string, i) > priority(stack.top->value))
        stack.push(convert(string[i]));
    // If the incoming operator has a lower or equal priority than the top, 
    // pop into the queue until see a lower priority or left bracket at the top, then add the incoming operator onto the stack
    else if (priority(string, i) <= priority(stack.top->value))
    {
        do
        {
            queue.push(stack.pop());
        } while ((!stack.is_empty()) && (stack.top->value != "(") && (priority(string, i) <= priority(stack.peek(&stack))));
        stack.push(convert(string[i]));
    }
}

void Calc::add_item(string string, size_t* i)
{
    std::string helper;

    if (unary_minus)
    {
        helper.append(1, '-');
        unary_minus = false;
    }

    while ((isdigit(string[*i])) || (string[*i] == '.'))
    {
        helper.append(1, string[*i]);
        (*i)++;
    }

    queue.push(helper);
    (*i)--;
}

bool Calc::brackets(string string)
{
    size_t i,
        left_bracket = 0,
        right_bracket = 0;

    // Counting brackets
    for (i = 0; i < string.length(); i++)
    {
        if (string[i] == '(')
            left_bracket++;
        if (string[i] == ')')
            right_bracket++;
    }

    // If the count of left brackets and the count of right brackets are equal, brackets written correct
    if (left_bracket == right_bracket)
        return true;
    else
        return false;
}

bool Calc::sign_check(string string)
{
    size_t i;

    for (i = 0; i < string.length() - 1; i++)
    {
        // If the operator is followed by one more operator, return false
        if (is_sign(string, i) && is_sign(string, i + 1))
            return false;
        // If the bracket is followed by one more bracket, return false
        if (((string[i] == '(') && (string[i + 1] == ')')))
            return false;
        if (((string[i] == ')') && (string[i + 1] == '(')))
            return false;
    }
    return true;
}

bool Calc::dot_check(string string)
{
    size_t i = 0,
        dot_count = 0;

    while (i < string.length())
    {
        if (is_sign(string, i) || (string[i] != '(') || (string[i] != ')'))
            i++;

        if (string[i] == '.')
        {
            dot_count++;
            i++;
        }
    }

    if (dot_count <= 1)
        return true;
    else
        return false;
}

void Calc::correct(string string)
{
    Calc calc;
    bool flag = true;

    if (flag == !calc.brackets(string))
        throw out_of_range("There was a problem with count of brackets. Try again. \n");

    if (flag == !calc.sign_check(string))
        throw out_of_range("There was a problem with count of arithmetic signs. Try again. \n");

    if (flag == !calc.dot_check(string))
        throw out_of_range("There was a problem with count of dots in the number. Try again. \n");

    cout << "Your string is correct! \n";
}

void Calc::add(string string)
{
    size_t i;

    unary_minus = false;
    for (i = 0; i < string.length(); i++)
    {
        if (isdigit(string[i]) && (string[i] != '(') && (string[i] != ')'))
            add_item(string, &i);

        else if ((is_sign(string, i) && (!unary_minus)) || (string[i] == '(') || (string[i] == ')'))
            add_sign(string, i);

        else if (is_constant(string, &i))
            continue;

        else if (is_function(string, &i))
            continue;
    }

    while (!stack.is_empty())
        queue.push(stack.pop());
}


void Calc::print_queue(std::string result)
{
    while (!queue.is_empty())
    {
        cout << queue.pop() << " ";
    }
}

double Calc::which_is(string string)
{
    double answer;								

    if (string.length() > 1)
        answer = which_function_is(string);
    else
    {
        try
        {
            answer = which_sign_is(string);
            return answer;
        }
        catch (domain_error e)
        {
            cerr << e.what() << endl;
        }
    }    
}

double Calc::which_sign_is(string string)
{
    std::string signs[] = { "+", "-", "*", "/", "^" };	            // Arithmetic signs
    double result;								                    // The result of calculating
    double value1;								                    // First operand
    double value2;								                    // Second operand
    size_t i;									                    // Loop parameter

    i = 0;
    while (signs[i] != string)
        i++;

    switch (i)
    {
    case(0):
        value2 = stack.pop_double();
        value1 = stack.pop_double();
        result = value1 + value2;
        break;

    case(1):
        value2 = stack.pop_double();
        value1 = stack.pop_double();
        result = value1 - value2;
        break;

    case(2):
        value2 = stack.pop_double();
        value1 = stack.pop_double();
        result = value1 * value2;
        break;

    case(3):
        value2 = stack.pop_double();
        value1 = stack.pop_double();
        if (value2 != 0)
            result = value1 / value2;
        else
            throw domain_error("The expression contains division by zero!");
        break;

    case(4):
        value2 = stack.pop_double();
        value1 = stack.pop_double();
        result = pow(value1, value2);
        break;
    }

    return result;
}

double Calc::which_function_is(string string)
{
    std::string functions[] = { "sin", "asin", "cos", "acos", "tan", "atan", "cot", "ln", "log", "sqrt" };
    double result;								                    // The result of calculating
    double value;								                    // Argument of function
    size_t i;									                    // Loop parameter

    i = 0;
    while (functions[i] != string)
        i++;

    switch (i)
    {
    case(0):
        value = stack.pop_double();
        result = sin(value);
        break;
     
    case(1):
        value = stack.pop_double();
        result = asin(value);
        break;
        
    case(2):
        value = stack.pop_double();
        result = cos(value);
        break;
        
    case(3):
        value = stack.pop_double();
        result = acos(value);
        break;
        
    case(4):
        value = stack.pop_double();
        result = tan(value);
        break;
        
    case(5):
        value = stack.pop_double();
        result = atan(value);
        break;
        
    case(6):
        value = stack.pop_double();
        result = cos(value) / sin(value);
        break;
       
    case(7):
        value = stack.pop_double();
        result = log(value);
        break;
        
    case(8):
        value = stack.pop_double();
        result = log10(value);
        break;
        
    case(9):
        value = stack.pop_double();
        result = sqrt(value);
        break;
    }

    return result;
}

void Calc::counter()
{
    Queue::Queue_item* current;                                     // Current data
    double answer;

    answer = 0;
    current = queue.begin;
    while (current != NULL)
    {
        try
        {
            // push the value onto the stack 
            answer = stod(current->value);
            stack.push(answer);
        }
        catch (invalid_argument)
        {
            // if the value is constant or constant with unary minus
            if (current->value == "e")
                stack.push(M_E);
            else if (current->value == "-e")
                stack.push(-M_E);
            else if (current->value == "pi")
                stack.push(M_PI);
            else if (current->value == "-pi")
                stack.push(-M_PI);
            // check which type is the value: operator or function 
            else
            {
                answer = which_is(current->value);
                stack.push(answer);
            }
        }
        current = current->next;
    }

    if (!stack.is_empty_double())
        answer = stack.pop_double();

    cout << answer << endl;
}
