#include <iostream>
#include "Tree.h" 
using namespace std;

int main()
{
    BST tree;
    BST::Iterator iterator;
    BST::Node* root = NULL;                                 // Pointer of the root
    int* result;                                            // Result of Pre-order or Breadth-first search
    int key;                                                // Key for finding, inserting and removing
    size_t i,                                               // Loop parameter
        size,                                               // Size of the tree            
        ans;                                                // User's choice

    // Filling the tree from the root. Root is the first value, then the left leaf, the right leaf and their heirs in the same way
    tree.insert(&root, 8);
    tree.insert(&root, 3);
    tree.insert(&root, 10);
    tree.insert(&root, 1);
    tree.insert(&root, 6);
    tree.insert(&root, 14);
    tree.insert(&root, 4);
    tree.insert(&root, 7);
    
    size = 8;

    cout << "Default tree" << endl;
    tree.printTree(root, "root", 0);

    cout << endl;

    do
    {
        cout << "Choose your option: \n";
        cout << "1) Find the element \n";
        cout << "2) Insert the element \n";
        cout << "3) Remove the element \n";
        cout << "4) Pre-order \n";
        cout << "5) Breadth-first search \n";
        cout << "6) Print the tree \n";
        cout << "7) Close the program \n";
        cin >> ans;

        switch (ans)
        {
        case(1):
            cout << "Enter the value from your tree: \n";
            cin >> key;

            if (key != NULL)
                cout << "The value " << key << "exisits \n";
            else
                cout << "The value doesn't exist \n";

            system("pause");
            system("cls");
            break;

        case(2):
            cout << "Enter the value you want to add: \n";
            cin >> key;
            try 
            {
                tree.insert(&root, key);
                cout << "Successfully!";
                size++;
            }
            catch (out_of_range e)
            {
                cerr << e.what() << endl;
            }

            system("pause");
            system("cls");
            break;

        case(3):
            cout << "Enter the value you want to remove: \n";
            cin >> key;
            try
            {
                tree.deleting(root, key);
                cout << "Successfully!";
                size--;
            }
            catch (out_of_range e)
            {
                cerr << e.what() << endl;
            }

            system("pause");
            system("cls");
            break;

        case(4):
            cout << "Pre-order: " << endl;
            result = iterator.create_dft_iterator(root, &tree, size);

            for (i = 0; i < size; i++)
                cout << result[i] << " ";

            system("pause");
            system("cls");
            break;

        case(5):
            cout << "Breadth-first search: " << endl;
            result = iterator.create_bft_iterator(root, &tree, size);

            for (i = 0; i < size; i++)
                cout << result[i] << " ";

            system("pause");
            system("cls");
            break;

        case(6):
            cout << "Your tree:" << endl;
            tree.printTree(root, "root", 0);

            system("pause");
            system("cls");
            break;

        case(7):
            cout << "See you!\n";

            system("pause");
            system("cls");
            break;


        default:
            cout << "Incorrect input. Try again";

            system("pause");
            system("cls");
            break;
        }
    } while (ans != 7);

    return 0;
}

