#include <iostream>
#include <stdexcept>
#include "Tree.h" 

using namespace std;

//--------------------------------------------------
BST::Node* BST::create(int value, Node* parent) 
{
    Node* tmp = new Node;
    tmp->left = tmp->right = NULL;
    tmp->data = value;
    tmp->parent = parent;
    return tmp;
}

void BST::insert(Node** head, int value) 
{
    Node* tmp = NULL;
    
    // If the tree is empty, we should use function that creates it
    if (*head == NULL) {
        *head = create(value, NULL);
        return;
    }

    // If value is bigger than current, we shoud place it on the right side, otherwise on the left 
    tmp = *head;
    while (tmp) {
        if (value > tmp->data) {

            // If the node is not NULL
            if (tmp->right) {
                tmp = tmp->right;
            }

            // If it is
            else {
                tmp->right = create(value, tmp);
                return;
            }
        }
        else if (value < tmp->data) {
            if (tmp->left) {
                tmp = tmp->left;
            }
            else {
                tmp->left = create(value, tmp);
                return;
            }
        }
        else {
            throw out_of_range("No way. This value is in the tree already. ");
        }
    }
}

BST::Node* BST::getmax(Node* root) 
{
    while (root->left) 
        root = root->left;

    return root;
}

BST::Node* BST::contains(Node* root, int value) 
{
    bool flag = false;
    while ((root) && (flag == false)) 
    {
        // If current value is bigger or smaller than the needed one, we move next
        if (root->data > value) 
            root = root->left;

        else if (root->data < value) 
            root = root->right;

        // If current value is equal the needed one, the loop stops, the value returns
        else 
        {
            flag = true;
            return root;
        }
    }
    // If the value isn't found, the code returns NULL
    return NULL;
}

void BST::remove(Node* heir) 
{
    // If the node has both heirs
    if (heir->left && heir->right)
    {
        // Finding the local minimum in the left subtree and replace the deleting node with it 
        Node* localMin = getmax(heir->right);
        heir->data = localMin->data;
        remove(localMin);
        return;
    }
    // If the node has only left heir
    else if (heir->left)
    {
        // Replace the deleting node with the heir
        if (heir == heir->parent->left)
            heir->parent->left = heir->left;
        
        else 
            heir->parent->right = heir->left;
    }
    // If the node has only right heir
    else if (heir->right)
    {
        if (heir == heir->parent->right)
            heir->parent->right = heir->right;

        else 
            heir->parent->left = heir->right;
    }
    // If the node has no heirs
    else 
    {
        // Which is that node heir for its parent
        if (heir == heir->parent->left)
            heir->parent->left = NULL;

        else 
            heir->parent->right = NULL;
    }
    free(heir);
}

void BST::deleting(Node* root, int value) 
{
    // Finding the needed element
    Node* heir = contains(root, value);
    if (heir == NULL)
        throw out_of_range("Your value doesn't exist in the tree!");

    // Removing it
    remove(heir);
}

void BST::print_tree(Node* root, const char* dir, int level) 
{
    if (root) 
    {
        printf("level %d %s = %d\n", level, dir, root->data);
        print_tree(root->left, "left", level + 1);
        print_tree(root->right, "right", level + 1);
    }
}

BST::Iterator::Stack::Stack_item::Stack_item(Stack_item* next_constructor, int value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}

BST::Iterator::Stack::Stack()
{
    top = NULL;
}

void BST::Iterator::Stack::push(int value)
{
	Stack_item* new_item = NULL;				            // New item of the list;

    // if the stack is empty the new element creates as begin of it
	if (top == NULL)
	{
		top = new Stack_item(NULL, value);
		if (top == NULL)
			throw out_of_range("Memory not allocated.");
	}
	else
	{
		new_item = new Stack_item(top, value);
		if (new_item == NULL)
			throw out_of_range("Memory not allocated.");
        else
    		top = new_item;
	}
}

int BST::Iterator::Stack::pop()
{
	Stack_item* deleted;						// Excluded stack item
	int value;									// Stack item value

	if (top == NULL)
		throw out_of_range("The stack is empty.");

    else 
    {
        value = top->value;
        deleted = top;
        top = top->next;
        delete deleted;
    }

	return value;
}

bool BST::Iterator::Stack::is_empty()
{
	bool emptiness;								// Flag that checks if the list is empty

	if (top == NULL)
        emptiness = true;
	else
        emptiness = false;

	return emptiness;
}

BST::Iterator::Queue::Queue_item::Queue_item(Queue_item* next_constructor, int value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}

BST::Iterator::Queue::Queue()
{
    begin = NULL;
    end = NULL;
}

void BST::Iterator::Queue::push(int value)
{
    // if the queue is empty the new element creates as begin and end of it
	if (begin == NULL)
	{
		begin = new Queue_item(NULL, value);
		if (begin == NULL)
			throw out_of_range("Memory not allocated.");
        else
    		end = begin;
	}
	else
	{
		end->next = new Queue_item(NULL, value);
		if (end->next == NULL)
			throw out_of_range("Memory not allocated.");
        else
    		end = end->next;
	}
}

int BST::Iterator::Queue::pop()
{
	Queue_item* deleted;						// Excluded queue item
	int value;									// Queue item value

	if (begin == NULL)
		throw out_of_range("The queue is empty.");

    else
    {
        value = begin->value;
        deleted = begin;
        begin = begin->next;
        delete deleted;
    }

	return value;
}

bool BST::Iterator::Queue::is_empty()
{
	bool answer;								// The program's response about the empty list

	if (begin == NULL)
		answer = true;
	else
		answer = false;

	return answer;
}

int* BST::Iterator::create_bft_iterator(BST::Node* root, BST* tree, size_t size) 
{
    Queue* queue = new Queue;                               // Queue for BFT
    int value;                                              // Value of the thee's node
    Node* node;                                             // The tree's node
    int* result = new int[size];                            // Resulting array
    size_t i = 0;                                           // Loop parameter

    queue->push(root->data);
    while (!queue->is_empty())
    {
        value = queue->pop();
        result[i++] = value;
        node = tree->contains(root, value);

        if (node->left != NULL)
            queue->push(node->left->data);
        if (node->right != NULL)
            queue->push(node->right->data);
    }

    // Destructor of queue
    delete queue;

    return result;
}

int* BST::Iterator::create_dft_iterator(BST::Node* root, BST* tree, size_t size)
{
    Stack* stack = new Stack;
    int value;
    Node* node;
    int* result = new int[size];
    size_t i = 0;

    node = root;
    stack->push(node->data);

    while (!stack->is_empty())
    {
        result[i++] = node->data;

        if (node->right != NULL)
            stack->push(node->right->data);

        if (node->left != NULL) 
        {
            node = node->left;
        }
        else
        {
            value = stack->pop();
            node = tree->contains(root, value);
        }
    }

    // Destructor for stack
    delete stack;

    return result;
}
