#include <iostream>
#include <stdexcept>
#include "Tree.h" 

using namespace std;

BST::Node::Node(int data, Node* left, Node* right, Node* parent)
    : data(data), left(left), right(right), parent(parent)
{}

BST::Stack::Stack()
{
    top = NULL;
}

BST::Stack::~Stack()
{
    while (top != NULL)
        pop();
}

BST::Queue::Queue()
{
    begin = NULL;
    end = NULL;
}

BST::Queue::~Queue()
{
    while (begin != NULL)
        pop();

    begin = NULL;
    end = NULL;
}

BST::dft_iterator::dft_iterator(Node* first)
{
    current = first;
    stack = new Stack;

    stack->push(first);
}

BST::dft_iterator::~dft_iterator()
{
    current = NULL;
    delete stack;
}

BST::bft_iterator::bft_iterator(Node* first)
{
    current = first;
    queue = new Queue;

    queue->push(first);
}

BST::bft_iterator::~bft_iterator()
{
    current = NULL;
    delete queue;
}

BST::Iterator* BST::create_dft_iterator()
{
    dft_iterator* iterator;                                         // Traversal iterator address

    if (Root == NULL)
        throw out_of_range("The tree is empty!");

    iterator = new dft_iterator(Root);
    return iterator;
}

bool BST::dft_iterator::has_next()
{
    bool flag;									                    // Flag for checking if queue has next element

    if (!stack->is_empty())
        flag = true;
    else
        flag = false;

    return flag;
}

int BST::dft_iterator::next()
{
    int value;									                    // Value of the current item

    if (has_next())
    {
        if (current->right != NULL)
            stack->push(current->right);

        value = current->data;

        if (current->left != NULL)
            current = current->left;
        else
            current = stack->pop();

        return value;
    }
}

BST::Iterator* BST::create_bft_iterator()
{
    bft_iterator* iterator;                                         // Traversal iterator address

    if (Root == NULL)
        throw out_of_range("There are no elements in the binary heap!");

    iterator = new bft_iterator(Root);
    return iterator;
}

bool BST::bft_iterator::has_next()
{
    bool flag;									                    // Flag for checking if queue has next element

    if (!queue->is_empty())
        flag = true;
    else
        flag = false;

    return flag;
}

int BST::bft_iterator::next()
{
    if (has_next())
    {
        current = queue->pop();
        if (current->left != NULL)
            queue->push(current->left);
        if (current->right != NULL)
            queue->push(current->right);

        return current->data;
    }
}

BST::Stack::Stack_item::Stack_item(Stack_item* next_constructor, Node* value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}


void BST::Stack::push(Node* value)
{
    Stack_item* new_item = NULL;				                    // New item of the list

    // if the stack is empty the new element creates as begin of it
    if (top == NULL)
    {
        top = new Stack_item(NULL, value);
    }
    else
    {
        new_item = new Stack_item(top, value);
        top = new_item;
    }
}

BST::Node* BST::Stack::pop()
{
    Stack_item* deleting;						                    // The removed stack element
    Node* value;								                    // Stack item's value

    if (top == NULL)
        throw out_of_range("The stack is empty.");

    else
    {
        value = top->value;
        deleting = top;
        top = top->next;
        delete deleting;
    }

    return value;
}

bool BST::Stack::is_empty()
{
    bool emptiness;								                    // Flag that checks if the stack is empty

    if (top == NULL)
        emptiness = true;
    else
        emptiness = false;

    return emptiness;
}

BST::Queue::Queue_item::Queue_item(Queue_item* next_constructor, Node* value_constructor)
{
    next = next_constructor;
    value = value_constructor;
}

void BST::Queue::push(Node* value)
{
    // if the queue is empty the new element creates as begin and end of it
    if (begin == NULL)
    {
        begin = new Queue_item(NULL, value);
        end = begin;
    }
    else
    {
        end->next = new Queue_item(NULL, value);
        if (end->next == NULL)
            throw out_of_range("Memory not allocated.");
        else
            end = end->next;
    }
}

BST::Node* BST::Queue::pop()
{
    Queue_item* deleting;						                    // The removed queue element
    Node* value;									                // Queue item's value

    if (begin == NULL)
        throw out_of_range("The queue is empty.");

    else
    {
        value = begin->value;
        deleting = begin;
        begin = begin->next;
        delete deleting;
    }

    return value;
}

bool BST::Queue::is_empty()
{
    bool answer;								                    // Flag that checks if the queue is empty

    if (begin == NULL)
        answer = true;
    else
        answer = false;

    return answer;
}

void BST::insert(Node** head, int value) 
{
    Node* tmp = NULL;
    
    // If the tree is empty, we should use function that creates it
    if (*head == NULL) {
        *head = new Node(value, NULL, NULL, NULL);
        Root = *head;
        return;
    }

    // If value is bigger than current, we shoud place it on the right side, otherwise on the left 
    tmp = *head;
    while (tmp) {
        if (value > tmp->data) {

            // If the node is not NULL
            if (tmp->right) {
                tmp = tmp->right;
            }

            // If it is
            else {
                tmp->right = new Node(value, NULL, NULL, tmp);
                return;
            }
        }
        else if (value < tmp->data) {
            if (tmp->left) {
                tmp = tmp->left;
            }
            else {
                tmp->left = new Node(value, NULL, NULL, tmp);
                return;
            }
        }
        else {
            throw out_of_range("No way. This value is in the tree already. ");
        }
    }
}

BST::Node* BST::getmax(Node* root) 
{
    while (root->left) 
        root = root->left;

    return root;
}

BST::Node* BST::contains(Node* root, int value) 
{
    bool flag = false;
    while ((root) && (flag == false)) 
    {
        // If current value is bigger or smaller than the needed one, we move next
        if (root->data > value) 
            root = root->left;

        else if (root->data < value) 
            root = root->right;

        // If current value is equal the needed one, the loop stops, the value returns
        else 
        {
            flag = true;
            return root;
        }
    }
    // If the value isn't found, the code returns NULL
    return NULL;
}

void BST::remove(Node* root, int value)
{
    Node* localmax;                                                 // Local maximum
    // Finding the needed element
    Node* heir = contains(root, value);
    if (heir == NULL)
        throw out_of_range("Your value doesn't exist in the tree!");

    // If the node has both heirs
    if (heir->left && heir->right)
    {
        // Finding the local minimum in the left subtree and replace the deleting node with it 
        localmax = getmax(heir->right);
        heir->data = localmax->data;
        remove(localmax, heir->data);
        return;
    }
    // If the node has only left heir
    else if (heir->left)
    {
        // Replace the deleting node with the heir
        if (heir == heir->parent->left)
            heir->parent->left = heir->left;
        
        else 
            heir->parent->right = heir->left;
    }
    // If the node has only right heir
    else if (heir->right)
    {
        if (heir == heir->parent->right)
            heir->parent->right = heir->right;

        else 
            heir->parent->left = heir->right;
    }
    // If the node has no heirs
    else 
    {
        // Which is that node heir for its parent
        if (heir == heir->parent->left)
            heir->parent->left = NULL;

        else 
            heir->parent->right = NULL;
    }
    free(heir);
}

void BST::print_tree(Node* root, const char* dir, int level) 
{
    if (root) 
    {
        printf("level %d %s = %d\n", level, dir, root->data);
        print_tree(root->left, "left", level + 1);
        print_tree(root->right, "right", level + 1);
    }
}
