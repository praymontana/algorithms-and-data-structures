#include <stdexcept>
#include "CppUnitTest.h"
#include "../ConsoleApplication2/Prototypes.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTest1
{
	TEST_CLASS(UnitTest1)
	{
	public:
		
		TEST_METHOD(Insertion_test)
		{
			int array[10] = { };
			size_t i;
			for (i = 0; i < 10; i++)
				array[i] = rand() % std::numeric_limits<int>::max();
			insertSort(array, 10);

			Assert::AreEqual(isSorted(array, 10), true);
		}

		TEST_METHOD(Bogo_test)
		{
			int array[5] = { };
			size_t i;
			for (i = 0; i < 5; i++)
				array[i] = rand() % std::numeric_limits<int>::max();
			bogoSort(array, 5);

			Assert::AreEqual(isSorted(array, 5), true);
		}

		TEST_METHOD(Quick_test)
		{
			int array[10] = { };
			size_t i;
			for (i = 0; i < 10; i++)
				array[i] = rand() % std::numeric_limits<char>::max();
			quickSort(array, 0, 9);

			Assert::AreEqual(isSorted(array, 10), true);
		}

		TEST_METHOD(Counting_test)
		{
			char array[10] = { };
			size_t i;
			for (i = 0; i < 10; i++)
				array[i] = rand() % std::numeric_limits<char>::max();
			countingSort(array, 10);

			Assert::AreEqual(isSorted(array, 10), true);                                                                                                           
		}

		TEST_METHOD(Binary_test)
		{
			int array[10] = {1, 3, 5, 2, 9, 0, 7, 6, 8, 4};
			size_t i;
			insertSort(array, 10);

			Assert::AreEqual(binarySearch(array, 2, 0, 9), (size_t)2);
		}

		TEST_METHOD(Swap_test)
		{
			int array[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
			size_t i;
			swap(&array[1], &array[2]);

			Assert::AreEqual(array[1], 3);
			Assert::AreEqual(array[2], 2);
		}
	};
}
